11,18c11
< C           OPTIONS ALLOW CHOOSING THE WIDTH OF THE GRID SQUARE
< C           (IPOPT(1)) TO SEARCH FOR VALID DATA, WHICH DEFAULTS TO 1
< C           (IF IPOPT(1)=-1).  ODD WIDTH SQUARES ARE CENTERED ON
< C           THE NEAREST INPUT GRID POINT; EVEN WIDTH SQUARES ARE
< C           CENTERED ON THE NEAREST FOUR INPUT GRID POINTS.
< C           SQUARES ARE SEARCHED FOR VALID DATA IN A SPIRAL PATTERN
< C           STARTING FROM THE CENTER.  NO SEARCHING IS DONE WHERE
< C           THE OUTPUT GRID IS OUTSIDE THE INPUT GRID.
---
> C           NO OPTIONS ARE ALLOWED.
42,45d34
< C 1999-04-08  IREDELL  SPLIT IJKGDS INTO TWO PIECES
< C 2001-06-18  IREDELL  INCLUDE SPIRAL SEARCH OPTION
< C 2006-01-04  GAYNO    MINOR BUG FIX
< C 2007-10-30  IREDELL  SAVE WEIGHTS AND THREAD FOR PERFORMANCE
51,53c40
< C     IPOPT    - INTEGER (20) INTERPOLATION OPTIONS
< C                IPOPT(1) IS WIDTH OF SQUARE TO EXAMINE IN SPIRAL SEARCH
< C                (DEFAULTS TO 1 IF IPOPT(1)=-1)
---
> C     IPOPT    - INTEGER (20) INTERPOLATION OPTIONS (NO OPTIONS)
83,84c70
< C   IJKGDS0      SET UP PARAMETERS FOR IJKGDS1
< C   (IJKGDS1)    RETURN FIELD POSITION FOR A GIVEN GRID POINT
---
> C   (IJKGDS)     RETURN FIELD POSITION FOR A GIVEN GRID POINT
91,101c77,83
<       IMPLICIT NONE
<       INTEGER,INTENT(IN):: IPOPT(20),KGDSI(200),KGDSO(200),MI,MO,KM
<       INTEGER,INTENT(IN):: IBI(KM)
<       LOGICAL*1,INTENT(IN):: LI(MI,KM)
<       REAL,INTENT(IN):: GI(MI,KM)
<       INTEGER,INTENT(INOUT):: NO
<       REAL,INTENT(INOUT):: RLAT(MO),RLON(MO)
<       INTEGER,INTENT(OUT):: IBO(KM)
<       LOGICAL*1,INTENT(OUT):: LO(MO,KM)
<       REAL,INTENT(OUT):: GO(MO,KM)
<       INTEGER,INTENT(OUT):: IRET
---
> CFPP$ EXPAND(IJKGDS)
>       INTEGER IPOPT(20)
>       INTEGER KGDSI(200),KGDSO(200)
>       INTEGER IBI(KM),IBO(KM)
>       LOGICAL*1 LI(MI,KM),LO(MO,KM)
>       REAL GI(MI,KM),GO(MO,KM)
>       REAL RLAT(MO),RLON(MO)
103,118c85,86
<       INTEGER IJKGDSA(20)
<       REAL,PARAMETER:: FILL=-9999.
<       INTEGER MSPIRAL,N,K,NK,NV,IJKGDS1
<       INTEGER I1,J1,IXS,JXS,MX,KXS,KXT,IX,JX,NX
<       REAL DUM
<       INTEGER,SAVE:: KGDSIX(200)=-1,KGDSOX(200)=-1,NOX=-1,IRETX=-1
<       INTEGER,ALLOCATABLE,SAVE:: NXY(:)
<       REAL,ALLOCATABLE,SAVE:: RLATX(:),RLONX(:),XPTSX(:),YPTSX(:)
< C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
< C  SET PARAMETERS
<       IRET=0
<       MSPIRAL=MAX(IPOPT(1),1)
< C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
< C  SAVE OR SKIP WEIGHT COMPUTATION
<       IF(IRET.EQ.0.AND.(KGDSO(1).LT.0.OR.
<      &    ANY(KGDSI.NE.KGDSIX).OR.ANY(KGDSO.NE.KGDSOX))) THEN
---
>       INTEGER N11(MO)
>       PARAMETER(FILL=-9999.)
121,124c89,93
<         IF(KGDSO(1).GE.0) THEN
<           CALL GDSWIZ(KGDSO, 0,MO,FILL,XPTS,YPTS,RLON,RLAT,NO,0,DUM,DUM)
<           IF(NO.EQ.0) IRET=3
<         ENDIF
---
>       IRET=0
>       IF(KGDSO(1).GE.0) THEN
>         CALL GDSWIZ(KGDSO, 0,MO,FILL,XPTS,YPTS,RLON,RLAT,NO,0,DUM,DUM)
>         IF(NO.EQ.0) IRET=3
>       ENDIF
127,136c96,106
<         CALL GDSWIZ(KGDSI,-1,NO,FILL,XPTS,YPTS,RLON,RLAT,NV,0,DUM,DUM)
<         IF(IRET.EQ.0.AND.NV.EQ.0) IRET=2
< C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
< C  ALLOCATE AND SAVE GRID DATA
<         KGDSIX=KGDSI
<         KGDSOX=KGDSO
<         IF(NOX.NE.NO) THEN
<           IF(NOX.GE.0) DEALLOCATE(RLATX,RLONX,XPTSX,YPTSX,NXY)
<           ALLOCATE(RLATX(NO),RLONX(NO),XPTSX(NO),YPTSX(NO),NXY(NO))
<           NOX=NO
---
>       CALL GDSWIZ(KGDSI,-1,NO,FILL,XPTS,YPTS,RLON,RLAT,NV,0,DUM,DUM)
>       IF(IRET.EQ.0.AND.NV.EQ.0) IRET=2
>       DO N=1,NO
>         XI=XPTS(N)
>         YI=YPTS(N)
>         IF(XI.NE.FILL.AND.YI.NE.FILL) THEN
>           I1=NINT(XI)
>           J1=NINT(YI)
>           N11(N)=IJKGDS(I1,J1,KGDSI)
>         ELSE
>           N11(N)=0
138c108
<         IRETX=IRET
---
>       ENDDO
140,167c110,112
< C  COMPUTE WEIGHTS
<         IF(IRET.EQ.0) THEN
<           CALL IJKGDS0(KGDSI,IJKGDSA)
< C$OMP PARALLEL DO
< C$OMP&PRIVATE(N)
<           DO N=1,NO
<             RLONX(N)=RLON(N)
<             RLATX(N)=RLAT(N)
<             XPTSX(N)=XPTS(N)
<             YPTSX(N)=YPTS(N)
<             IF(XPTS(N).NE.FILL.AND.YPTS(N).NE.FILL) THEN
<               NXY(N)=IJKGDS1(NINT(XPTS(N)),NINT(YPTS(N)),IJKGDSA)
<             ELSE
<               NXY(N)=0
<             ENDIF
<           ENDDO
<         ENDIF
<       ENDIF
< C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
< C  INTERPOLATE OVER ALL FIELDS
<       IF(IRET.EQ.0.AND.IRETX.EQ.0) THEN
<         IF(KGDSO(1).GE.0) THEN
<           NO=NOX
<           DO N=1,NO
<             RLON(N)=RLONX(N)
<             RLAT(N)=RLATX(N)
<           ENDDO
<         ENDIF
---
> C  INTERPOLATE WITH OR WITHOUT BITMAPS
> CMIC$ DO ALL AUTOSCOPE
>       DO K=1,KM
169,177c114
<           XPTS(N)=XPTSX(N)
<           YPTS(N)=YPTSX(N)
<         ENDDO
< C$OMP PARALLEL DO
< C$OMP&PRIVATE(NK,K,N,I1,J1,IXS,JXS,MX,KXS,KXT,IX,JX,NX)
<         DO NK=1,NO*KM
<           K=(NK-1)/NO+1
<           N=NK-NO*(K-1)
<           GO(N,K)=0
---
>           GO(N,K)=0.
179,181c116,118
<           IF(NXY(N).GT.0) THEN
<             IF(IBI(K).EQ.0.OR.LI(NXY(N),K)) THEN
<               GO(N,K)=GI(NXY(N),K)
---
>           IF(N11(N).GT.0) THEN
>             IF(IBI(K).EQ.0.OR.LI(N11(N),K))  THEN
>               GO(N,K)=GI(N11(N),K)
183,212d119
< C SPIRAL AROUND UNTIL VALID DATA IS FOUND.
<             ELSEIF(MSPIRAL.GT.1) THEN
<               I1=NINT(XPTS(N))
<               J1=NINT(YPTS(N))
<               IXS=SIGN(1.,XPTS(N)-I1)
<               JXS=SIGN(1.,YPTS(N)-J1)
<               DO MX=2,MSPIRAL**2
<                 KXS=SQRT(4*MX-2.5)
<                 KXT=MX-(KXS**2/4+1)
<                 SELECT CASE(MOD(KXS,4))
<                 CASE(1)
<                   IX=I1-IXS*(KXS/4-KXT)
<                   JX=J1-JXS*KXS/4
<                 CASE(2)
<                   IX=I1+IXS*(1+KXS/4)
<                   JX=J1-JXS*(KXS/4-KXT)
<                 CASE(3)
<                   IX=I1+IXS*(1+KXS/4-KXT)
<                   JX=J1+JXS*(1+KXS/4)
<                 CASE DEFAULT
<                   IX=I1-IXS*KXS/4
<                   JX=J1+JXS*(KXS/4-KXT)
<                 END SELECT
<                 NX=IJKGDS1(IX,JX,IJKGDSA)
<                 IF(NX.GT.0.AND.LI(NX,K)) THEN
<                   GO(N,K)=GI(NX,K)
<                   LO(N,K)=.TRUE.
<                   EXIT
<                 ENDIF
<               ENDDO
216,218c123,128
<         DO K=1,KM
<           IBO(K)=IBI(K)
<           IF(.NOT.ALL(LO(1:NO,K))) IBO(K)=1
---
>         IBO(K)=IBI(K)
>         DO N=1,NO
>           IF(.NOT.LO(N,K)) THEN
>             IBO(K)=1
>             GO(N,K)=0.
>           ENDIF
220,225c130,131
<         IF(KGDSO(1).EQ.0) CALL POLFIXS(NO,MO,KM,RLAT,RLON,IBO,LO,GO)
< C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
<       ELSE
<         IF(IRET.EQ.0) IRET=IRETX
<         IF(KGDSO(1).GE.0) NO=0
<       ENDIF
---
>       ENDDO
>       IF(KGDSO(1).EQ.0) CALL POLFIXS(NO,MO,KM,RLAT,RLON,IBO,LO,GO)
